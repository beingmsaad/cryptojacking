"(function($){\r\n    $.fn.validationEngineLanguage = function(){\r\n    };\r\n    $.validationEngineLanguage = {\r\n        newLang: function(){\r\n            $.validationEngineLanguage.allRules = {\r\n                \"required\": { // Add your regex rules here, you can take telephone as an example\r\n                    \"regex\": \"none\",\r\n                    \"alertText\": \"* This field is required\",\r\n                    \"alertTextCheckboxMultiple\": \"* Please select an option\",\r\n                    \"alertTextCheckboxe\": \"* This checkbox is required\"\r\n                },\r\n                \"minSize\": {\r\n                    \"regex\": \"none\",\r\n                    \"alertText\": \"* Minimum \",\r\n                    \"alertText2\": \" characters allowed\"\r\n                },\r\n                \"maxSize\": {\r\n                    \"regex\": \"none\",\r\n                    \"alertText\": \"* Maximum \",\r\n                    \"alertText2\": \" characters allowed\"\r\n                },\r\n                \"min\": {\r\n                    \"regex\": \"none\",\r\n                    \"alertText\": \"* Minimum value is \"\r\n                },\r\n                \"max\": {\r\n                    \"regex\": \"none\",\r\n                    \"alertText\": \"* Maximum value is \"\r\n                },\r\n                \"past\": {\r\n                    \"regex\": \"none\",\r\n                    \"alertText\": \"* Date prior to \"\r\n                },\r\n                \"future\": {\r\n                    \"regex\": \"none\",\r\n                    \"alertText\": \"* Date past \"\r\n                },\t\r\n                \"maxCheckbox\": {\r\n                    \"regex\": \"none\",\r\n                    \"alertText\": \"* Checks allowed Exceeded\"\r\n                },\r\n                \"minCheckbox\": {\r\n                    \"regex\": \"none\",\r\n                    \"alertText\": \"* Please select \",\r\n                    \"alertText2\": \" options\"\r\n                },\r\n                \"equals\": {\r\n                    \"regex\": \"none\",\r\n                    \"alertText\": \"* Select at least one\"\r\n                },\r\n                \"phone\": {\r\n                    // credit: jquery.h5validate.js / orefalo\r\n                    \"regex\": /^([\\+][0-9]{1,3}[ \\.\\-])?([\\(]{1}[0-9]{2,6}[\\)])?([0-9 \\.\\-\\/]{3,20})((x|ext|extension)[ ]?[0-9]{1,4})?$/,\r\n                    \"alertText\": \"* Invalid phone number\"\r\n                },\r\n                \"email\": {\r\n                    // Simplified, was not working in the Iphone browser\r\n                    \"regex\": /^([A-Za-z0-9_\\-\\.\\'])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,6})$/,\r\n                    \"alertText\": \"* Invalid email address\"\r\n                },\r\n                \"integer\": {\r\n                    \"regex\": /^[\\-\\+]?\\d+$/,\r\n                    \"alertText\": \"* Not a valid integer\"\r\n                },\r\n                \"number\": {\r\n                    // Number, including positive, negative, and floating decimal. credit: orefalo\r\n                    \"regex\": /^[\\-\\+]?(([0-9]+)([\\.,]([0-9]+))?|([\\.,]([0-9]+))?)$/,\r\n                    \"alertText\": \"* Invalid floating decimal number\"\r\n                },\r\n                \"date\": {\r\n                    \"regex\": /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/,\r\n                    \"alertText\": \"* Invalid date, must be in YYYY-MM-DD format\"\r\n                },\r\n                \"ipv4\": {\r\n                    \"regex\": /^((([01]?[0-9]{1,2})|(2[0-4][0-9])|(25[0-5]))[.]){3}(([0-1]?[0-9]{1,2})|(2[0-4][0-9])|(25[0-5]))$/,\r\n                    \"alertText\": \"* Invalid IP address\"\r\n                },\r\n                \"url\": {\r\n                    \"regex\": /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/,\r\n                    \"alertText\": \"* Invalid URL\"\r\n                },\r\n                \"onlyNumberSp\": {\r\n                    \"regex\": /^[0-9\\ ]+$/,\r\n                    \"alertText\": \"* Numbers only\"\r\n                },\r\n                \"onlyLetterSp\": {\r\n                    \"regex\": /^[a-zA-Z\\ \\']+$/,\r\n                    \"alertText\": \"* Letters only\"\r\n                },\r\n                \"onlyLetterNumber\": {\r\n                    \"regex\": /^[0-9a-zA-Z]+$/,\r\n                    \"alertText\": \"* No special characters allowed\"\r\n                },\r\n                // --- CUSTOM RULES -- Those are specific to the demos, they can be removed or changed to your likings\r\n                \"ajaxUserCall\": {\r\n\t\t\t\t\t//\"regex\": /^[0-9a-zA-Z]+$/,\r\n                    \"url\": \"/ajax/ajax.cfm?action=4\",\r\n                    // you may want to pass extra data on the ajax call\r\n                    \"extraData\": \"username\",\r\n\t\t\t\t\t//\"alertTextOk\": \"* This name is available\",\r\n                    \"alertText\": \"* This user is already taken <br /> Choose one from below\",\r\n\t\t\t\t\t\"alertTextError\": \"* This user name is invalid\",\r\n                    \"alertTextLoad\": \"* Validating, please wait\"\r\n                },\r\n\t\t\t\t\"ajaxUserCallPhp\": {\r\n                    \"url\": \"phpajax/ajaxValidateFieldUser.php\",\r\n                    // you may want to pass extra data on the ajax call\r\n                    \"extraData\": \"name=eric\",\r\n                    // if you provide an \"alertTextOk\", it will show as a green prompt when the field validates\r\n                    \"alertTextOk\": \"* This username is available\",\r\n                    \"alertText\": \"* This user is already taken\",\r\n                    \"alertTextLoad\": \"* Validating, please wait\"\r\n                },\r\n                \"ajaxNameCall\": {\r\n                    // remote json service location\r\n                    \"url\": \"ajaxValidateFieldName\",\r\n                    // error\r\n                    \"alertText\": \"* This name is already taken\",\r\n                    // if you provide an \"alertTextOk\", it will show as a green prompt when the field validates\r\n                    \"alertTextOk\": \"* This name is available\",\r\n                    // speaks by itself\r\n                    \"alertTextLoad\": \"* Validating, please wait\"\r\n                },\r\n\t\t\t\t \"ajaxNameCallPhp\": {\r\n\t                    // remote json service location\r\n\t                    \"url\": \"phpajax/ajaxValidateFieldName.php\",\r\n\t                    // error\r\n\t                    \"alertText\": \"* This name is already taken\",\r\n\t                    // speaks by itself\r\n\t                    \"alertTextLoad\": \"* Validating, please wait\"\r\n\t                },\r\n                \"validate2fields\": {\r\n                    \"alertText\": \"* Please input HELLO\"\r\n                }\r\n            };\r\n            \r\n        }\r\n    };\r\n    $.validationEngineLanguage.newLang();\r\n})(jQuery);\r\n\r\n/*\r\n * Inline Form Validation Engine 2.1, jQuery plugin\r\n *\r\n * Copyright(c) 2010, Cedric Dugas\r\n * http://www.position-absolute.com\r\n *\r\n * 2.0 Rewrite by Olivier Refalo\r\n * http://www.crionics.com\r\n *\r\n * Form validation engine allowing custom regex rules to be added.\r\n * Licensed under the MIT License\r\n */\r\n(function($) {\r\n\r\n    var methods = {\r\n\r\n        /**\r\n         * Kind of the constructor, called before any action\r\n         * @param {Map} user options\r\n         */\r\n        init: function(options) {\r\n            var form = this;\r\n            if (!form.data('jqv') || form.data('jqv') == null ) {\r\n                methods._saveOptions(form, options);\r\n\r\n                // bind all formError elements to close on click\r\n                $(\".formError\").live(\"click\", function() {\r\n                    $(this).fadeOut(150, function() {\r\n\r\n                        // remove prompt once invisible\r\n                        $(this).remove();\r\n                    });\r\n                });\r\n            }\r\n        },\r\n        /**\r\n         * Attachs jQuery.validationEngine to form.submit and field.blur events\r\n         * Takes an optional params: a list of options\r\n         * ie. jQuery(\"#formID1\").validationEngine('attach', {promptPosition : \"centerRight\"});\r\n         */\r\n        attach: function(userOptions) {\r\n            var form = this;\r\n            var options;\r\n\r\n            if(userOptions)\r\n                options = methods._saveOptions(form, userOptions);\r\n            else\r\n                options = form.data('jqv');\r\n\r\n            if (!options.binded) {\r\n\t\t\t\t\tif (options.bindMethod == \"bind\"){\r\n                        // bind fields\r\n                        form.find(\"[class*=validate]:not([type=checkbox])\").bind(options.validationEventTrigger, methods._onFieldEvent);\r\n                        form.find(\"[class*=validate][type=checkbox]\").bind(\"click\", methods._onFieldEvent);\r\n\r\n                        // bind form.submit\r\n                        form.bind(\"submit\", methods._onSubmitEvent);\r\n\t\t\t\t\t} else if (options.bindMethod == \"live\") {\r\n                        // bind fields with LIVE (for persistant state)\r\n                        form.find(\"[class*=validate]:not([type=checkbox])\").live(options.validationEventTrigger, methods._onFieldEvent);\r\n                        form.find(\"[class*=validate][type=checkbox]\").live(\"click\", methods._onFieldEvent);\r\n\r\n                        // bind form.submit\r\n                        form.live(\"submit\", methods._onSubmitEvent);\r\n\t\t\t\t\t}\r\n\r\n                options.binded = true;\r\n            }\r\n\r\n        },\r\n        /**\r\n         * Unregisters any bindings that may point to jQuery.validaitonEngine\r\n         */\r\n        detach: function() {\r\n            var form = this;\r\n            var options = form.data('jqv');\r\n            if (options.binded) {\r\n\r\n                // unbind fields\r\n                form.find(\"[class*=validate]\").not(\"[type=checkbox]\").unbind(options.validationEventTrigger, methods._onFieldEvent);\r\n                form.find(\"[class*=validate][type=checkbox]\").unbind(\"click\", methods._onFieldEvent);\r\n                // unbind form.submit\r\n                form.unbind(\"submit\", methods.onAjaxFormComplete);\r\n                \r\n               \r\n                // unbind live fields (kill)\r\n                form.find(\"[class*=validate]\").not(\"[type=checkbox]\").die(options.validationEventTrigger, methods._onFieldEvent);\r\n                form.find(\"[class*=validate][type=checkbox]\").die(\"click\", methods._onFieldEvent);\r\n                // unbind form.submit\r\n                form.die(\"submit\", methods.onAjaxFormComplete);\r\n                \r\n                form.removeData('jqv');\r\n            }\r\n        },\r\n        /**\r\n         * Validates the form fields, shows prompts accordingly.\r\n         * Note: There is no ajax form validation with this method, only field ajax validation are evaluated\r\n         *\r\n         * @return true if the form validates, false if it fails\r\n         */\r\n        validate: function() {\r\n            return methods._validateFields(this,0,1);\r\n        },\r\n\t\tvalidate2: function() {\r\n            return methods._validateFields(this);\r\n        },\r\n        /**\r\n         * Validates one field, shows prompt accordingly.\r\n         * Note: There is no ajax form validation with this method, only field ajax validation are evaluated\r\n         *\r\n         * @return true if the form validates, false if it fails\r\n         */\r\n        validateField: function(el) {\r\n            var options = $(this).data('jqv');\r\n            return methods._validateField($(el), options);\r\n        },\r\n\t\tvalidateField2: function() {\r\n\t\t\tvar elem = $(this);\r\n\t\t\tvar rulesParsing = elem.attr('class');\r\n            var getRules = /validate\\[(.*)\\]/.exec(rulesParsing);\r\n            if (!getRules)\r\n                return 11;\r\n            var str = getRules[1];\r\n            var rules = str.split(/\\[|,|\\]/);\r\n            var options1 = $(\"#register\").data('jqv');\r\n\t\t\t//console.log(options.isError);\r\n            methods._ajax(elem,rules,0,options1,1);\r\n\t\t\t//console.log(\"asdad\" + options.isError);\r\n\t\t\t//var options1 = $(\"#register\").data('jqv');\r\n\t\t\t//console.log(options1.isError);\r\n        },\r\n        /**\r\n         * Validates the form fields, shows prompts accordingly.\r\n         * Note: this methods performs fields and form ajax validations(if setup)\r\n         *\r\n         * @return true if the form validates, false if it fails, undefined if ajax is used for form validation\r\n         */\r\n        validateform: function() {\r\n            return methods._onSubmitEvent.call(this);\r\n        },\r\n        /**\r\n         * Displays a prompt on a element.\r\n         * Note that the element needs an id!\r\n         *\r\n         * @param {String} promptText html text to display type\r\n         * @param {String} type the type of bubble: 'pass' (green), 'load' (black) anything else (red)\r\n         * @param {String} possible values topLeft, topRight, bottomLeft, centerRight, bottomRight\r\n         */\r\n        showPrompt: function(promptText, type, promptPosition, showArrow) {\r\n\r\n            var form = this.closest('form');\r\n            var options = form.data('jqv');\r\n            // No option, take default one\r\n\t\t\tif(!options) options = methods._saveOptions(this, options);\r\n            if(promptPosition)\r\n                options.promptPosition=promptPosition;\r\n            options.showArrow = showArrow==true;\r\n\r\n            methods._showPrompt(this, promptText, type, false, options);\r\n        },\r\n        /**\r\n         * Closes all error prompts on the page\r\n         */\r\n        hidePrompt: function() {\r\n        \t\tvar promptClass =  \".\"+ methods._getClassName($(this).attr(\"id\")) + \"formError\"\r\n            $(promptClass).fadeTo(\"fast\", 0.3, function() {\r\n                $(this).remove();\r\n            });\r\n        },\r\n        /**\r\n         * Closes form error prompts, CAN be invidual\r\n         */\r\n        hide: function() {\r\n        \tif($(this).is(\"form\")){\r\n        \t\t var closingtag = \"parentForm\"+$(this).attr('id');\r\n        \t}else{\r\n        \t\t\r\n        \t\tvar closingtag = $(this).attr('id') +\"formError\"\r\n        \t}\r\n            $('.'+closingtag).fadeTo(\"fast\", 0.3, function() {\r\n                $(this).remove();\r\n            });\r\n        },\r\n        /**\r\n         * Closes all error prompts on the page\r\n         */\r\n        hideAll: function() {\r\n            $('.formError').fadeTo(\"fast\", 0.3, function() {\r\n                $(this).remove();\r\n            });\r\n        },\r\n        /**\r\n         * Typically called when user exists a field using tab or a mouse click, triggers a field\r\n         * validation\r\n         */\r\n        _onFieldEvent: function() {\r\n            var field = $(this);\r\n            var form = field.closest('form');\r\n            var options = form.data('jqv');\r\n            // validate the current field\r\n            methods._validateField(field, options);\r\n        },\r\n        /**\r\n         * Called when the form is submited, shows prompts accordingly\r\n         *\r\n         * @param {jqObject}\r\n         *            form\r\n         * @return false if form submission needs to be cancelled\r\n         */\r\n        _onSubmitEvent: function() {\r\n            var form = $(this);\r\n \t\t\tvar options = form.data('jqv');\r\n   \r\n\t\t\t// validate each field (- skip field ajax validation, no necessary since we will perform an ajax form validation)\r\n            var r=methods._validateFields(form, true);\r\n\t\t\r\n            if (r && options.ajaxFormValidation) {\r\n                methods._validateFormWithAjax(form, options);\r\n                return false;\r\n            }\r\n\r\n            if(options.onValidationComplete) {\r\n                options.onValidationComplete(form, r);\r\n                return false;\r\n            }\r\n            return r;\r\n        },\r\n\r\n        /**\r\n         * Return true if the ajax field validations passed so far\r\n         * @param {Object} options\r\n         * @return true, is all ajax validation passed so far (remember ajax is async)\r\n         */\r\n        _checkAjaxStatus: function(options) {\r\n            var status = true;\r\n            $.each(options.ajaxValidCache, function(key, value) {\r\n                if (!value) {\r\n                    status = false;\r\n                    // break the each\r\n                    return false;\r\n                }\r\n            });\r\n            return status;\r\n        },\r\n        /**\r\n         * Validates form fields, shows prompts accordingly\r\n         *\r\n         * @param {jqObject}\r\n         *            form\r\n         * @param {skipAjaxFieldValidation}\r\n         *            boolean - when set to true, ajax field validation is skipped, typically used when the submit button is clicked\r\n         *\r\n         * @return true if form is valid, false if not, undefined if ajax form validation is done\r\n         */\r\n        _validateFields: function(form, skipAjaxValidation,skip) {\r\n            var options = form.data('jqv');\r\n\r\n            // this variable is set to true if an error is found\r\n            var errorFound = false;\r\n\t\t\t\r\n\t\t\t// Trigger hook, start validation\r\n\t\t\tform.trigger(\"jqv.form.validating\")\r\n            // first, evaluate status of non ajax fields\r\n            form.find('[class*=validate]').not(':hidden').each( function() {\r\n                var field = $(this);\r\n                errorFound |= methods._validateField(field, options, skipAjaxValidation);\r\n            });\r\n            // second, check to see if all ajax calls completed ok\r\n\t\t\tif(skip)\r\n            \terrorFound |= !methods._checkAjaxStatus(options);\r\n\t\t\t\r\n            // thrird, check status and scroll the container accordingly\r\n\t\t\tform.trigger(\"jqv.form.result\", [errorFound])\r\n\t\t\t\r\n            if (errorFound) {\r\n\t\t\t\t\r\n                /*if (options.scroll) {\r\n\r\n                    // get the position of the first error, there should be at least one, no need to check this\r\n                    //var destination = form.find(\".formError:not('.greenPopup'):first\").offset().top;\r\n\r\n                    // look for the visually top prompt\r\n                    var destination = Number.MAX_VALUE;\r\n\r\n                    var lst = $(\".formError:not('.greenPopup')\");\r\n                    for (var i = 0; i < lst.length; i++) {\r\n                        var d = $(lst[i]).offset().top;\r\n                        if (d < destination)\r\n                            destination = d;\r\n                    }\r\n\r\n                    if (!options.isOverflown)\r\n                        $(\"html:not(:animated),body:not(:animated)\").animate({\r\n                            scrollTop: destination\r\n                        }, 1100);\r\n                    else {\r\n                        var overflowDIV = $(options.overflownDIV);\r\n                        var scrollContainerScroll = overflowDIV.scrollTop();\r\n                        var scrollContainerPos = -parseInt(overflowDIV.offset().top);\r\n\r\n                        destination += scrollContainerScroll + scrollContainerPos - 5;\r\n                        var scrollContainer = $(options.overflownDIV + \":not(:animated)\");\r\n\r\n                        scrollContainer.animate({\r\n                            scrollTop: destination\r\n                        }, 1100);\r\n                    }\r\n                }*/\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        /**\r\n         * This method is called to perform an ajax form validation.\r\n         * During this process all the (field, value) pairs are sent to the server which returns a list of invalid fields or true\r\n         *\r\n         * @param {jqObject} form\r\n         * @param {Map} options\r\n         */\r\n        _validateFormWithAjax: function(form, options) {\r\n\r\n            var data = form.serialize();\r\n\t\t\tvar url = (options.ajaxFormValidationURL) ? options.ajaxFormValidationURL : form.attr(\"action\");\r\n            $.ajax({\r\n                type: \"GET\",\r\n                url: url,\r\n                cache: false,\r\n                dataType: \"json\",\r\n                data: data,\r\n                form: form,\r\n                methods: methods,\r\n                options: options,\r\n                beforeSend: function() {\r\n                    return options.onBeforeAjaxFormValidation(form, options);\r\n                },\r\n                error: function(data, transport) {\r\n                    methods._ajaxError(data, transport);\r\n                },\r\n                success: function(json) {\r\n\r\n                    if (json !== true) {\r\n\r\n                        // getting to this case doesn't necessary means that the form is invalid\r\n                        // the server may return green or closing prompt actions\r\n                        // this flag helps figuring it out\r\n                        var errorInForm=false;\r\n                        for (var i = 0; i < json.length; i++) {\r\n                            var value = json[i];\r\n\t\t\t\t\t\t\r\n                            var errorFieldId = value[0];\r\n                            var errorField = $($(\"#\" + errorFieldId)[0]);\r\n\t\t\t\t\t\t\t\r\n                            // make sure we found the element\r\n                            if (errorField.length == 1) {\r\n\t\t\t\t\t\t\t\t\r\n                                // promptText or selector\r\n                                var msg = value[2];\r\n\t\t\t\t\t\t\t\t// if the field is valid\r\n                                if (value[1] == true) {\r\n\r\n                                    if (msg == \"\"  || !msg){\r\n                                        // if for some reason, status==true and error=\"\", just close the prompt\r\n                                        methods._closePrompt(errorField);\r\n                                    } else {\r\n                                        // the field is valid, but we are displaying a green prompt\r\n                                        if (options.allrules[msg]) {\r\n                                            var txt = options.allrules[msg].alertTextOk;\r\n                                            if (txt)\r\n                                                msg = txt;\r\n                                        }\r\n                                        methods._showPrompt(errorField, msg, \"pass\", false, options, true);\r\n                                    }\r\n\r\n                                } else {\r\n                                    // the field is invalid, show the red error prompt\r\n                                    errorInForm|=true;\r\n                                    if (options.allrules[msg]) {\r\n                                        var txt = options.allrules[msg].alertText;\r\n                                        if (txt)\r\n                                            msg = txt;\r\n                                    }\r\n                                    methods._showPrompt(errorField, msg, \"\", false, options, true);\r\n                                }\r\n                            }\r\n                        }\r\n                        options.onAjaxFormComplete(!errorInForm, form, json, options);\r\n                    } else\r\n                        options.onAjaxFormComplete(true, form, \"\", options);\r\n                }\r\n            });\r\n\r\n        },\r\n        /**\r\n         * Validates field, shows prompts accordingly\r\n         *\r\n         * @param {jqObject}\r\n         *            field\r\n         * @param {Array[String]}\r\n         *            field's validation rules\r\n         * @param {Map}\r\n         *            user options\r\n         * @return true if field is valid\r\n         */\r\n        _validateField: function(field, options, skipAjaxValidation) {\r\n            if (!field.attr(\"id\"))\r\n                $.error(\"jQueryValidate: an ID attribute is required for this field: \" + field.attr(\"name\") + \" class:\" +\r\n                field.attr(\"class\"));\r\n\r\n            var rulesParsing = field.attr('class');\r\n            var getRules = /validate\\[(.*)\\]/.exec(rulesParsing);\r\n            if (!getRules)\r\n                return false;\r\n            var str = getRules[1];\r\n            var rules = str.split(/\\[|,|\\]/);\r\n\r\n            // true if we ran the ajax validation, tells the logic to stop messing with prompts\r\n            var isAjaxValidator = false;\r\n            var fieldName = field.attr(\"name\");\r\n            var promptText = \"\";\r\n\t\t\tvar required = false;\r\n            options.isError = false;\r\n            options.showArrow = true;\r\n            optional = false;\r\n\r\n            for (var i = 0; i < rules.length; i++) {\r\n\r\n                var errorMsg = undefined;\r\n                switch (rules[i]) {\r\n\r\n                    case \"optional\":\r\n                        optional = true;\r\n                        break;\r\n                    case \"required\":\r\n                        required = true;\r\n                        errorMsg = methods._required(field, rules, i, options);\r\n                        break;\r\n                    case \"custom\":\r\n                        errorMsg = methods._customRegex(field, rules, i, options);\r\n                        break;\r\n                    case \"ajax\":\r\n                        // ajax has its own prompts handling technique\r\n\t\t\t\t\t\tif(!skipAjaxValidation){\r\n\t\t\t\t\t\t\tmethods._ajax(field, rules, i, options);\r\n\t                        isAjaxValidator = true;\r\n\t\t\t\t\t\t}\r\n                        break;\r\n                    case \"minSize\":\r\n                        errorMsg = methods._minSize(field, rules, i, options);\r\n                        break;\r\n                    case \"maxSize\":\r\n                        errorMsg = methods._maxSize(field, rules, i, options);\r\n                        break;\r\n                    case \"min\":\r\n                        errorMsg = methods._min(field, rules, i, options);\r\n                        break;\r\n                    case \"max\":\r\n                        errorMsg = methods._max(field, rules, i, options);\r\n                        break;\r\n                    case \"past\":\r\n                        errorMsg = methods._past(field, rules, i, options);\r\n                        break;\r\n                    case \"future\":\r\n                        errorMsg = methods._future(field, rules, i, options);\r\n                        break;\r\n                    case \"maxCheckbox\":\r\n                        errorMsg = methods._maxCheckbox(field, rules, i, options);\r\n                        field = $($(\"input[name='\" + fieldName + \"']\"));\r\n                        break;\r\n                    case \"minCheckbox\":\r\n                        errorMsg = methods._minCheckbox(field, rules, i, options);\r\n                        field = $($(\"input[name='\" + fieldName + \"']\"));\r\n                        break;\r\n                    case \"equals\":\r\n                        errorMsg = methods._equals(field, rules, i, options);\r\n                        break;\r\n                    case \"funcCall\":\r\n                        errorMsg = methods._funcCall(field, rules, i, options);\r\n                        break;\r\n\r\n                    default:\r\n                    //$.error(\"jQueryValidator rule not found\"+rules[i]);\r\n                }\r\n                if (errorMsg !== undefined) {\r\n                    promptText += errorMsg + \"<br/>\";\r\n                    options.isError = true;\r\n\t\t\t\t\t\r\n                }\r\n\r\n            }\r\n            // If the rules required is not added, an empty field is not validated\r\n            if(!required){\r\n            \tif(field.val() == \"\") options.isError = false;\r\n            }\r\n            // Hack for radio/checkbox group button, the validation go into the\r\n            // first radio/checkbox of the group\r\n            var fieldType = field.attr(\"type\");\r\n\r\n            if ((fieldType == \"radio\" || fieldType == \"checkbox\") && $(\"input[name='\" + fieldName + \"']\").size() > 1) {\r\n                field = $($(\"input[name='\" + fieldName + \"'][type!=hidden]:first\"));\r\n                options.showArrow = false;\r\n            }\r\n\r\n            if (options.isError){\r\n\t\t\t\t\r\n                methods._showPrompt(field, promptText, \"\", false, options);\r\n            }else{\r\n\t\t\t\tif (!isAjaxValidator) methods._closePrompt(field);\r\n\t\t\t}\r\n\t\t\tfield.closest('form').trigger(\"jqv.field.error\", [field, options.isError, promptText])\r\n            return options.isError;\r\n        },\r\n        /**\r\n         * Required validation\r\n         *\r\n         * @param {jqObject} field\r\n         * @param {Array[String]} rules\r\n         * @param {int} i rules index\r\n         * @param {Map}\r\n         *            user options\r\n         * @return an error string if validation failed\r\n         */\r\n        _required: function(field, rules, i, options) {\r\n            switch (field.attr(\"type\")) {\r\n                case \"text\":\r\n                case \"password\":\r\n                case \"textarea\":\r\n                case \"file\":\r\n                default:\r\n                    if (!field.val())\r\n                        return options.allrules[rules[i]].alertText;\r\n                    break;\r\n                case \"radio\":\r\n                case \"checkbox\":\r\n                    var name = field.attr(\"name\");\r\n                    if ($(\"input[name='\" + name + \"']:checked\").size() == 0) {\r\n\r\n                        if ($(\"input[name='\" + name + \"']\").size() == 1)\r\n                            return options.allrules[rules[i]].alertTextCheckboxe;\r\n                        else\r\n                            return options.allrules[rules[i]].alertTextCheckboxMultiple;\r\n                    }\r\n                    break;\r\n                // required for <select>\r\n                case \"select-one\":\r\n                    // added by paul@kinetek.net for select boxes, Thank you\r\n                    if (!field.val())\r\n                        return options.allrules[rules[i]].alertText;\r\n                    break;\r\n                case \"select-multiple\":\r\n                    // added by paul@kinetek.net for select boxes, Thank you\r\n                    if (!field.find(\"option:selected\").val())\r\n                        return options.allrules[rules[i]].alertText;\r\n                    break;\r\n            }\r\n        },\r\n        /**\r\n         * Validate Regex rules\r\n         *\r\n         * @param {jqObject} field\r\n         * @param {Array[String]} rules\r\n         * @param {int} i rules index\r\n         * @param {Map}\r\n         *            user options\r\n         * @return an error string if validation failed\r\n         */\r\n        _customRegex: function(field, rules, i, options) {\r\n            var customRule = rules[i + 1];\r\n\t\t\tvar rule = options.allrules[customRule];\r\n\t\t\tif(!rule) {\r\n\t\t\t\talert(\"jqv:custom rule not found \"+customRule);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar ex=rule.regex;\r\n\t\t\tif(!ex) {\r\n\t\t\t\talert(\"jqv:custom regex not found \"+customRule);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n            var pattern = new RegExp(ex);\r\n\r\n            if (!pattern.test(field.attr('value')))\r\n                return options.allrules[customRule].alertText;\r\n        },\r\n        /**\r\n         * Validate custom function outside of the engine scope\r\n         *\r\n         * @param {jqObject} field\r\n         * @param {Array[String]} rules\r\n         * @param {int} i rules index\r\n         * @param {Map}\r\n         *            user options\r\n         * @return an error string if validation failed\r\n         */\r\n        _funcCall: function(field, rules, i, options) {\r\n            var functionName = rules[i + 1];\r\n            var fn = window[functionName];\r\n            if (typeof(fn) == 'function')\r\n                return fn(field, rules, i, options);\r\n\r\n        },\r\n        /**\r\n         * Field match\r\n         *\r\n         * @param {jqObject} field\r\n         * @param {Array[String]} rules\r\n         * @param {int} i rules index\r\n         * @param {Map}\r\n         *            user options\r\n         * @return an error string if validation failed\r\n         */\r\n        _equals: function(field, rules, i, options) {\r\n            var equalsField = rules[i + 1];\r\n\t\t\t//if (field.attr('value') != $(\"#\" + equalsField).attr('value')) -- zmiana\r\n            if (window.interests.length == 0 )\r\n                return options.allrules.equals.alertText;\r\n        },\r\n        /**\r\n         * Check the maximum size (in characters)\r\n         *\r\n         * @param {jqObject} field\r\n         * @param {Array[String]} rules\r\n         * @param {int} i rules index\r\n         * @param {Map}\r\n         *            user options\r\n         * @return an error string if validation failed\r\n         */\r\n        _maxSize: function(field, rules, i, options) {\r\n            var max = rules[i + 1];\r\n            var len = field.attr('value').length;\r\n\r\n            if (len > max) {\r\n                var rule = options.allrules.maxSize;\r\n                return rule.alertText + max + rule.alertText2;\r\n            }\r\n        },\r\n        /**\r\n         * Check the minimum size (in characters)\r\n         *\r\n         * @param {jqObject} field\r\n         * @param {Array[String]} rules\r\n         * @param {int} i rules index\r\n         * @param {Map}\r\n         *            user options\r\n         * @return an error string if validation failed\r\n         */\r\n        _minSize: function(field, rules, i, options) {\r\n            var min = rules[i + 1];\r\n            var len = field.attr('value').length;\r\n\r\n            if (len < min) {\r\n                var rule = options.allrules.minSize;\r\n                return rule.alertText + min + rule.alertText2;\r\n            }\r\n        },\r\n        /**\r\n         * Check number minimum value\r\n         *\r\n         * @param {jqObject} field\r\n         * @param {Array[String]} rules\r\n         * @param {int} i rules index\r\n         * @param {Map}\r\n         *            user options\r\n         * @return an error string if validation failed\r\n         */\r\n        _min: function(field, rules, i, options) {\r\n            var min = parseFloat(rules[i + 1]);\r\n            var len = parseFloat(field.attr('value'));\r\n\r\n            if (len < min) {\r\n                var rule = options.allrules.min;\r\n                if (rule.alertText2) return rule.alertText + min + rule.alertText2;\r\n                return rule.alertText + min;\r\n            }\r\n        },\r\n        /**\r\n         * Check number maximum value\r\n         *\r\n         * @param {jqObject} field\r\n         * @param {Array[String]} rules\r\n         * @param {int} i rules index\r\n         * @param {Map}\r\n         *            user options\r\n         * @return an error string if validation failed\r\n         */\r\n        _max: function(field, rules, i, options) {\r\n            var max = parseFloat(rules[i + 1]);\r\n            var len = parseFloat(field.attr('value'));\r\n\r\n            if (len >max ) {\r\n                var rule = options.allrules.max;\r\n                if (rule.alertText2) return rule.alertText + max + rule.alertText2;\r\n                //orefalo: to review, also do the translations\r\n                return rule.alertText + max;\r\n            }\r\n        },\r\n        /**\r\n         * Checks date is in the past\r\n         *\r\n         * @param {jqObject} field\r\n         * @param {Array[String]} rules\r\n         * @param {int} i rules index\r\n         * @param {Map}\r\n         *            user options\r\n         * @return an error string if validation failed\r\n         */\r\n        _past: function(field, rules, i, options) {\r\n\r\n            var p=rules[i + 1];\r\n            var pdate = (p.toLowerCase() == \"now\")? new Date():methods._parseDate(p);\r\n            var vdate = methods._parseDate(field.attr('value'));\r\n\r\n            if (vdate > pdate ) {\r\n                var rule = options.allrules.past;\r\n                if (rule.alertText2) return rule.alertText + methods._dateToString(pdate) + rule.alertText2;\r\n                return rule.alertText + methods._dateToString(pdate);\r\n            }\r\n        },\r\n        /**\r\n         * Checks date is in the past\r\n         *\r\n         * @param {jqObject} field\r\n         * @param {Array[String]} rules\r\n         * @param {int} i rules index\r\n         * @param {Map}\r\n         *            user options\r\n         * @return an error string if validation failed\r\n         */\r\n        _future: function(field, rules, i, options) {\r\n\r\n            var p=rules[i + 1];\r\n            var pdate = (p.toLowerCase() == \"now\")? new Date():methods._parseDate(p);\r\n            var vdate = methods._parseDate(field.attr('value'));\r\n\r\n            if (vdate < pdate ) {\r\n                var rule = options.allrules.future;\r\n                if (rule.alertText2) return rule.alertText + methods._dateToString(pdate) + rule.alertText2;\r\n                return rule.alertText + methods._dateToString(pdate);\r\n            }\r\n        },\r\n        /**\r\n         * Max number of checkbox selected\r\n         *\r\n         * @param {jqObject} field\r\n         * @param {Array[String]} rules\r\n         * @param {int} i rules index\r\n         * @param {Map}\r\n         *            user options\r\n         * @return an error string if validation failed\r\n         */\r\n        _maxCheckbox: function(field, rules, i, options) {\r\n\r\n            var nbCheck = rules[i + 1];\r\n            var groupname = field.attr(\"name\");\r\n            var groupSize = $(\"input[name='\" + groupname + \"']:checked\").size();\r\n            if (groupSize > nbCheck) {\r\n                options.showArrow = false;\r\n                return options.allrules.maxCheckbox.alertText;\r\n            }\r\n        },\r\n        /**\r\n         * Min number of checkbox selected\r\n         *\r\n         * @param {jqObject} field\r\n         * @param {Array[String]} rules\r\n         * @param {int} i rules index\r\n         * @param {Map}\r\n         *            user options\r\n         * @return an error string if validation failed\r\n         */\r\n        _minCheckbox: function(field, rules, i, options) {\r\n\r\n            var nbCheck = rules[i + 1];\r\n            var groupname = field.attr(\"name\");\r\n            var groupSize = $(\"input[name='\" + groupname + \"']:checked\").size();\r\n            if (groupSize < nbCheck) {\r\n                options.showArrow = false;\r\n                return options.allrules.minCheckbox.alertText + \" \" + nbCheck + \" \" +\r\n                options.allrules.minCheckbox.alertText2;\r\n            }\r\n        },\r\n\t\t_showSuggestBox: function(dane){\r\n\t\t\t$(\"#sugestion_box\").html('');\r\n\t\t\t$(\"#sugestion_box\").hide();\r\n\t\t\tif(dane){\r\n\t\t\t\t//console.log(dane);\r\n\t\t\t\tvar list = dane.split(\",\");\r\n\t\t\t\tfor(var i = 0; i<list.length; i++){\r\n\t\t\t\t\t$(\"#sugestion_box\").append('<div class=\"hightlight\" style=\"padding:3px; overflow:hidden; cursor:pointer; color:#5D6A97; width:134px;\" onClick=\"javascript:$(\\'#register\\').setNewUsername(\\''+ list[i] +'\\');\" >'+ list[i] +'</div>');\r\n\t\t\t\t}\r\n\t\t\t\t$(\"#sugestion_box\").show();\r\n\t\t\t}\r\n\t\t},\r\n        /**\r\n         * Ajax field validation\r\n         *\r\n         * @param {jqObject} field\r\n         * @param {Array[String]} rules\r\n         * @param {int} i rules index\r\n         * @param {Map}\r\n         *            user options\r\n         * @return nothing! the ajax validator handles the prompts itself\r\n         */\r\n        _ajax: function(field, rules, i, options, param) {\r\n            var errorSelector = rules[i + 1];\r\n            var rule = options.allrules[errorSelector];\r\n            var extraData = rule.extraData;\r\n\r\n            if (!extraData)\r\n                extraData = \"\";\r\n\r\n\t\t\t//console.log(1);\r\n            //if (!options.isError) {\r\n\t\t\t\t//console.log(2);\r\n                $.ajax({\r\n                    type: \"GET\",\r\n                    url: rule.url,\r\n                    cache: false,\r\n                    dataType: \"json\",\r\n                    data: extraData + '=' + field.attr(\"value\"),\r\n                    field: field,\r\n                    rule: rule,\r\n                    methods: methods,\r\n                    options: options,\r\n                    beforeSend: function() {\r\n                        // build the loading prompt\r\n                        var loadingText = rule.alertTextLoad;\r\n                        if (loadingText)\r\n                            methods._showPrompt(field, loadingText, \"load\", true, options);\r\n                    },\r\n                    error: function(data, transport) {\r\n                        methods._ajaxError(data, transport);\r\n                    },\r\n                    success: function(json) {\r\n\t\t\t\t\t\t\r\n                        // asynchronously called on success, data is the json answer from the server\r\n                        var errorFieldId = json[0];\r\n                        var errorField = $($(\"#\" + errorFieldId)[0]);\r\n                        // make sure we found the element\r\n                        if (errorField.length == 1) {\r\n                            var status = json[1];\r\n                            if (status == 0) {\r\n\t\r\n                                // Houston we got a problem\r\n                                options.ajaxValidCache[errorFieldId] = false;\r\n                                options.isError = true;\r\n\t\t\t\t\t\t\t\t\r\n                                var promptText = rule.alertText;\r\n                                methods._showPrompt(errorField, promptText, \"\", true, options);\r\n\t\t\t\t\t\t\t\tmethods._showSuggestBox(json[2]);\r\n                            } else if(status == 1) {\r\n\t\t\t\t\t\t\t\t\r\n                                if (options.ajaxValidCache[errorFieldId] !== undefined)\r\n                                    options.ajaxValidCache[errorFieldId] = true;\r\n\r\n                                // see if we should display a green prompt\r\n                                var alertTextOk = rule.alertTextOk;\r\n                                if (alertTextOk)\r\n                                    methods._showPrompt(errorField, alertTextOk, \"pass\", true, options);\r\n                                else\r\n                                    methods._closePrompt(errorField);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tmethods._showSuggestBox();\r\n                            }\r\n\t\t\t\t\t\t\telse if (status == -1) {\r\n\t\r\n                                // Houston we got a problem 2\r\n                                options.ajaxValidCache[errorFieldId] = false;\r\n                                options.isError = true;\r\n\t\t\t\t\t\t\t\t\r\n                                var promptText = rule.alertTextError;\r\n                                methods._showPrompt(errorField, promptText, \"\", true, options);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tmethods._showSuggestBox();\r\n                            }\r\n\t\t\t\t\t\t\t//console.log(\"dd \"+options.isError);\r\n                        }\r\n\t\t\t\t\t\tif(param && !options.isError){\r\n\t\t\t\t\t\t\tsubmitForm();\r\n\t\t\t\t\t\t}\r\n                    }\r\n                });\r\n            //}\r\n        },\r\n        /**\r\n         * Common method to handle ajax errors\r\n         *\r\n         * @param {Object} data\r\n         * @param {Object} transport\r\n         */\r\n        _ajaxError: function(data, transport) {\r\n            if(data.status == 0 && transport == null)\r\n                alert(\"The page is not served from a server! ajax call failed\");\r\n            else if(typeof console != \"undefined\")\r\n                console.log(\"Ajax error: \" + data.status + \" \" + transport);\r\n        },\r\n        /**\r\n         * date -> string\r\n         *\r\n         * @param {Object} date\r\n         */\r\n        _dateToString: function(date) {\r\n\r\n            return date.getFullYear()+\"-\"+(date.getMonth()+1)+\"-\"+date.getDate();\r\n        },\r\n        /**\r\n         * Parses an ISO date\r\n         * @param {String} d\r\n         */\r\n        _parseDate: function(d) {\r\n\r\n            var dateParts = d.split(\"-\");\r\n            if(dateParts!==d)\r\n                dateParts = d.split(\"/\");\r\n            return new Date(dateParts[0], (dateParts[1] - 1) ,dateParts[2]);\r\n        },\r\n        /**\r\n         * Builds or updates a prompt with the given information\r\n         *\r\n         * @param {jqObject} field\r\n         * @param {String} promptText html text to display type\r\n         * @param {String} type the type of bubble: 'pass' (green), 'load' (black) anything else (red)\r\n         * @param {boolean} ajaxed - use to mark fields than being validated with ajax\r\n         * @param {Map} options user options\r\n         */\r\n        _showPrompt: function(field, promptText, type, ajaxed, options, ajaxform) {\r\n            var prompt = methods._getPrompt(field);\r\n\t\t\t// The ajax submit errors are not see has an error in the form,\r\n\t\t\t// When the form errors are returned, the engine see 2 bubbles, but those are ebing closed by the engine at the same time\r\n\t\t\t// Because no error was found befor submitting\r\n\t\t\tif(ajaxform) prompt = false;\r\n            if (prompt)\r\n                methods._updatePrompt(field, prompt, promptText, type, ajaxed, options);\r\n            else\r\n                methods._buildPrompt(field, promptText, type, ajaxed, options);\r\n\t\t\t\r\n\t\t\twindow.setTimeout(function(){\r\n\t\t\t\tmethods._closePrompt(field);\r\n\t\t\t},4500);\r\n        },\r\n        /**\r\n         * Builds and shades a prompt for the given field.\r\n         *\r\n         * @param {jqObject} field\r\n         * @param {String} promptText html text to display type\r\n         * @param {String} type the type of bubble: 'pass' (green), 'load' (black) anything else (red)\r\n         * @param {boolean} ajaxed - use to mark fields than being validated with ajax\r\n         * @param {Map} options user options\r\n         */\r\n        _buildPrompt: function(field, promptText, type, ajaxed, options) {\r\n\r\n            // create the prompt\r\n            var prompt = $('<div>');\r\n            prompt.addClass(methods._getClassName(field.attr(\"id\")) + \"formError\");\r\n            // add a class name to identify the parent form of the prompt\r\n            if(field.is(\":input\")) prompt.addClass(\"parentForm\"+methods._getClassName(field.parents('form').attr(\"id\")));\r\n            prompt.addClass(\"formError\");\r\n\r\n            switch (type) {\r\n                case \"pass\":\r\n                    prompt.addClass(\"greenPopup\");\r\n                    break;\r\n                case \"load\":\r\n                    prompt.addClass(\"blackPopup\");\r\n            }\r\n            if (ajaxed)\r\n                prompt.addClass(\"ajaxed\");\r\n\r\n            // create the prompt content\r\n            var promptContent = $('<div>').addClass(\"formErrorContent\").html(promptText).appendTo(prompt);\r\n            // create the css arrow pointing at the field\r\n            // note that there is no triangle on max-checkbox and radio\r\n            if (options.showArrow) {\r\n                var arrow = $('<div>').addClass(\"formErrorArrow\");\r\n\r\n                switch (options.promptPosition) {\r\n                    case \"bottomLeft\":\r\n                    case \"bottomRight\":\r\n                        prompt.find(\".formErrorContent\").before(arrow);\r\n                        arrow.addClass(\"formErrorArrowBottom\").html('<div class=\"line1\"><!-- --></div><div class=\"line2\"><!-- --></div><div class=\"line3\"><!-- --></div><div class=\"line4\"><!-- --></div><div class=\"line5\"><!-- --></div><div class=\"line6\"><!-- --></div><div class=\"line7\"><!-- --></div><div class=\"line8\"><!-- --></div><div class=\"line9\"><!-- --></div><div class=\"line10\"><!-- --></div>');\r\n                        break;\r\n                    case \"topLeft\":\r\n                    case \"topRight\":\r\n                        arrow.html('<div class=\"line10\"><!-- --></div><div class=\"line9\"><!-- --></div><div class=\"line8\"><!-- --></div><div class=\"line7\"><!-- --></div><div class=\"line6\"><!-- --></div><div class=\"line5\"><!-- --></div><div class=\"line4\"><!-- --></div><div class=\"line3\"><!-- --></div><div class=\"line2\"><!-- --></div><div class=\"line1\"><!-- --></div>');\r\n                        prompt.append(arrow);\r\n                        break;\r\n                }\r\n            }\r\n\r\n            //Cedric: Needed if a container is in position:relative\r\n            // insert prompt in the form or in the overflown container?\r\n            if (options.isOverflown)\r\n            \tfield.before(prompt);\r\n            else\r\n               $(\"body\").append(prompt);\r\n\r\n            var pos = methods._calculatePosition(field, prompt, options);\r\n            prompt.css({\r\n                \"top\": pos.callerTopPosition,\r\n                \"left\": pos.callerleftPosition,\r\n                \"marginTop\": pos.marginTopSize,\r\n                \"opacity\": 0\r\n            });\r\n\r\n            return prompt.animate({\r\n                \"opacity\": 0.82\r\n            });\r\n\t\t\t\r\n\t\t\t\r\n        },\r\n        /**\r\n         * Updates the prompt text field - the field for which the prompt\r\n         * @param {jqObject} field\r\n         * @param {String} promptText html text to display type\r\n         * @param {String} type the type of bubble: 'pass' (green), 'load' (black) anything else (red)\r\n         * @param {boolean} ajaxed - use to mark fields than being validated with ajax\r\n         * @param {Map} options user options\r\n         */\r\n        _updatePrompt: function(field, prompt, promptText, type, ajaxed, options) {\r\n\t\t\t\r\n            if (prompt) {\r\n                if (type == \"pass\")\r\n                    prompt.addClass(\"greenPopup\");\r\n                else\r\n                    prompt.removeClass(\"greenPopup\");\r\n\r\n                if (type == \"load\")\r\n                    prompt.addClass(\"blackPopup\");\r\n                else\r\n                    prompt.removeClass(\"blackPopup\");\r\n\r\n                if (ajaxed)\r\n                    prompt.addClass(\"ajaxed\");\r\n                else\r\n                    prompt.removeClass(\"ajaxed\");\r\n\r\n                prompt.find(\".formErrorContent\").html(promptText);\r\n\r\n                var pos = methods._calculatePosition(field, prompt, options);\r\n                prompt.animate({\r\n                    \"top\": pos.callerTopPosition,\r\n                    \"marginTop\": pos.marginTopSize\r\n                });\r\n\t\t\t\t\r\n            }\r\n        },\r\n        /**\r\n         * Closes the prompt associated with the given field\r\n         *\r\n         * @param {jqObject}\r\n         *            field\r\n         */\r\n        _closePrompt: function(field) {\r\n\r\n            var prompt = methods._getPrompt(field);\r\n            if (prompt)\r\n                prompt.fadeTo(\"fast\", 0, function() {\r\n                    prompt.remove();\r\n                });\r\n        },\r\n        closePrompt: function(field) {\r\n            return methods._closePrompt(field);\r\n        },\r\n        /**\r\n         * Returns the error prompt matching the field if any\r\n         *\r\n         * @param {jqObject}\r\n         *            field\r\n         * @return undefined or the error prompt (jqObject)\r\n         */\r\n        _getPrompt: function(field) {\r\n\r\n            var className = \".\" + methods._getClassName(field.attr(\"id\")) + \"formError\";\r\n            var match = $(className)[0];\r\n            if (match)\r\n                return $(match);\r\n        },\r\n        /**\r\n         * Calculates prompt position\r\n         *\r\n         * @param {jqObject}\r\n         *            field\r\n         * @param {jqObject}\r\n         *            the prompt\r\n         * @param {Map}\r\n         *            options\r\n         * @return positions\r\n         */\r\n        _calculatePosition: function(field, promptElmt, options) {\r\n            var promptTopPosition, promptleftPosition, marginTopSize;\r\n            var fieldWidth = field.width();\r\n            var promptHeight = promptElmt.height();\r\n\r\n            var overflow = options.isOverflown;\r\n            if (overflow) {\r\n                // is the form contained in an overflown container?\r\n                promptTopPosition = promptleftPosition = 0;\r\n                // compensation for the arrow\r\n                marginTopSize = -promptHeight;\r\n            } else {\r\n                var offset = field.offset();\r\n                promptTopPosition = offset.top;\r\n                promptleftPosition = offset.left;\r\n                marginTopSize = 0;\r\n            }\r\n\r\n            switch (options.promptPosition) {\r\n\r\n                default:\r\n                case \"topRight\":\r\n                    if (overflow)\r\n                        // Is the form contained in an overflown container?\r\n                        promptleftPosition += fieldWidth - 20;\r\n                    else {\r\n                        promptleftPosition += fieldWidth - 20;\r\n                        promptTopPosition += -promptHeight;\r\n                    }\r\n                    break;\r\n                case \"topLeft\":\r\n                    promptTopPosition += -promptHeight - 10;\r\n                    break;\r\n                case \"centerRight\":\r\n                    promptleftPosition += fieldWidth + 13;\r\n                    break;\r\n                case \"bottomLeft\":\r\n                    promptTopPosition = promptTopPosition + field.height() + 15;\r\n                    break;\r\n                case \"bottomRight\":\r\n                    promptleftPosition += fieldWidth - 30;\r\n                    promptTopPosition += field.height() + 5;\r\n            }\r\n\t\t\tpromptTopPosition = promptTopPosition+1;\r\n            return {\r\n                \"callerTopPosition\": promptTopPosition + \"px\",\r\n                \"callerleftPosition\": promptleftPosition + \"px\",\r\n                \"marginTopSize\": marginTopSize + \"px\"\r\n            };\r\n        },\r\n        /**\r\n         * Saves the user options and variables in the form.data\r\n         *\r\n         * @param {jqObject}\r\n         *            form - the form where the user option should be saved\r\n         * @param {Map}\r\n         *            options - the user options\r\n         * @return the user options (extended from the defaults)\r\n         */\r\n        _saveOptions: function(form, options) {\r\n\r\n            // is there a language localisation ?\r\n            if ($.validationEngineLanguage)\r\n                var allRules = $.validationEngineLanguage.allRules;\r\n            else\r\n                $.error(\"jQuery.validationEngine rules are not loaded, plz add localization files to the page\");\r\n\r\n            var userOptions = $.extend({\r\n\r\n                // Name of the event triggering field validation\r\n                validationEventTrigger: \"blur\",\r\n                // Automatically scroll viewport to the first error\r\n                scroll: false,\r\n                // Opening box position, possible locations are: topLeft,\r\n                // topRight, bottomLeft, centerRight, bottomRight\r\n                promptPosition: \"topRight\",\r\n                bindMethod:\"bind\",\r\n\t\t\t\t// internal, automatically set to true when it parse a _ajax rule\r\n\t\t\t\tinlineAjax: false,\r\n                // if set to true, the form data is sent asynchronously via ajax to the form.action url (get)\r\n                ajaxFormValidation: false,\r\n                // Ajax form validation callback method: boolean onComplete(form, status, errors, options)\r\n                // retuns false if the form.submit event needs to be canceled.\r\n\t\t\t\tajaxFormValidationURL: false,\r\n                // The url to send the submit ajax validation (default to action)\r\n                onAjaxFormComplete: $.noop,\r\n                // called right before the ajax call, may return false to cancel\r\n                onBeforeAjaxFormValidation: $.noop,\r\n                // Stops form from submitting and execute function assiciated with it\r\n                onValidationComplete: false,\r\n\r\n                // Used when the form is displayed within a scrolling DIV\r\n                isOverflown: false,\r\n                overflownDIV: \"\",\r\n\r\n                // --- Internals DO NOT TOUCH or OVERLOAD ---\r\n                // validation rules and i18\r\n                allrules: allRules,\r\n                // true when form and fields are binded\r\n                binded: false,\r\n                // set to true, when the prompt arrow needs to be displayed\r\n                showArrow: true,\r\n                // did one of the validation fail ? kept global to stop further ajax validations\r\n                isError: true,\r\n                // Caches field validation status, typically only bad status are created.\r\n                // the array is used during ajax form validation to detect issues early and prevent an expensive submit\r\n                ajaxValidCache: {\"username\":false}\r\n\r\n            }, options);\r\n\r\n            form.data('jqv', userOptions);\r\n            return userOptions;\r\n        },\r\n        \r\n        /**\r\n         * Removes forbidden characters from class name\r\n         * @param {String} className\r\n         */\r\n        _getClassName: function(className) {\r\n        \treturn className.replace(\":\",\"_\").replace(\".\",\"_\");\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Plugin entry point.\r\n     * You may pass an action as a parameter or a list of options.\r\n     * if none, the init and attach methods are being called.\r\n     * Remember: if you pass options, the attached method is NOT called automatically\r\n     *\r\n     * @param {String}\r\n     *            method (optional) action\r\n     */\r\n    $.fn.validationEngine = function(method) {\r\n\r\n        var form = $(this);\r\n\t\t  if(!form[0]) return false;  // stop here if the form does not exist\r\n\t\t  \r\n        if (typeof(method) == 'string' && method.charAt(0) != '_' && methods[method]) {\r\n\r\n            // make sure init is called once\r\n            if(method != \"showPrompt\" && method != \"hidePrompt\" && method != \"hide\" && method != \"hideAll\") \r\n            \tmethods.init.apply(form);\r\n             \r\n            return methods[method].apply(form, Array.prototype.slice.call(arguments, 1));\r\n        } else if (typeof method == 'object' || !method) {\r\n            // default constructor with or without arguments\r\n\t\t\tmethods.init.apply(form, arguments);\r\n            return methods.attach.apply(form);\r\n        } else {\r\n            $.error('Method ' + method + ' does not exist in jQuery.validationEngine');\r\n        }\r\n    };\r\n\t\r\n\t$.fn.setNewUsername = function(value){\r\n\t\tvar form = $(this);\r\n\t\t if(!form[0]) return false;\r\n\t\t$(\"#sugestion_box\").hide();\r\n\t\t$(\"#username\").val(value);\r\n\t\t$(\".usernameformError\").remove();\r\n\t\toptions = form.data('jqv');\r\n\t\toptions.ajaxValidCache['username'] = true;\r\n\t}\r\n})(jQuery);\r\n\r\n"
